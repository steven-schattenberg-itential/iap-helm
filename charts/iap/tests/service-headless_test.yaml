suite: test individual services
templates:
  - service-headless.yaml
values:
  - ../tests/test-values.yaml
tests:
  - it: should create correct number of services
    set:
      replicaCount: 3
      service:
        name: iap
        port: 443
      applicationPort: 3443
      useWebSockets: true
    asserts:
      - hasDocuments:
          count: 3
      - isKind:
          of: Service
        documentIndex: 0
      - isKind:
          of: Service
        documentIndex: 1
      - isKind:
          of: Service
        documentIndex: 2

  - it: should have correct service names
    set:
      replicaCount: 3
      service:
        name: iap
        port: 443
      applicationPort: 3443
      useWebSockets: true
    asserts:
      - equal:
          path: metadata.name
          value: iap-headless-0
        documentIndex: 0
      - equal:
          path: metadata.name
          value: iap-headless-1
        documentIndex: 1
      - equal:
          path: metadata.name
          value: iap-headless-2
        documentIndex: 2

  - it: should have correct selector labels
    set:
      replicaCount: 2
      service:
        name: iap
        port: 443
      applicationPort: 3443
      useWebSockets: true
    asserts:
      - equal:
          path: spec.selector["statefulset.kubernetes.io/pod-name"]
          value: RELEASE-NAME-iap-0
        documentIndex: 0
      - equal:
          path: spec.selector["statefulset.kubernetes.io/pod-name"]
          value: RELEASE-NAME-iap-1
        documentIndex: 1

  - it: should have correct port configuration
    set:
      replicaCount: 1
      service:
        name: iap
        port: 8080
      applicationPort: 3000
      useWebSockets: true
    asserts:
      - equal:
          path: spec.ports[0].name
          value: https
        documentIndex: 0
      - equal:
          path: spec.ports[0].port
          value: 8080
        documentIndex: 0
      - equal:
          path: spec.ports[0].targetPort
          value: 3000
        documentIndex: 0

  - it: should include correct labels
    set:
      replicaCount: 1
      service:
        name: iap
        port: 443
      applicationPort: 3443
      useWebSockets: true
    asserts:
      - isNotEmpty:
          path: metadata.labels
        documentIndex: 0
      - exists:
          path: metadata.labels["app.kubernetes.io/name"]
        documentIndex: 0
      - exists:
          path: metadata.labels["app.kubernetes.io/instance"]
        documentIndex: 0

  - it: should work with single replica
    set:
      replicaCount: 1
      service:
        name: myapp
        port: 443
      applicationPort: 3443
      useWebSockets: true
    asserts:
      - hasDocuments:
          count: 1
      - equal:
          path: metadata.name
          value: myapp-headless-0
        documentIndex: 0
      - equal:
          path: spec.selector["statefulset.kubernetes.io/pod-name"]
          value: RELEASE-NAME-iap-0
        documentIndex: 0

  - it: should work with multiple replicas
    set:
      replicaCount: 5
      service:
        name: iap
        port: 443
      applicationPort: 3443
      useWebSockets: true
    asserts:
      - hasDocuments:
          count: 5
      - equal:
          path: metadata.name
          value: iap-headless-0
        documentIndex: 0
      - equal:
          path: metadata.name
          value: iap-headless-4
        documentIndex: 4

  - it: should have correct API version and kind
    set:
      replicaCount: 1
      service:
        name: iap
        port: 443
      applicationPort: 3443
      useWebSockets: true
    asserts:
      - equal:
          path: apiVersion
          value: v1
        documentIndex: 0
      - equal:
          path: kind
          value: Service
        documentIndex: 0

  - it: should include selectorLabels in spec.selector
    set:
      replicaCount: 1
      service:
        name: iap
        port: 443
      applicationPort: 3443
      useWebSockets: true
    asserts:
      - exists:
          path: spec.selector["app.kubernetes.io/name"]
        documentIndex: 0
      - exists:
          path: spec.selector["app.kubernetes.io/instance"]
        documentIndex: 0
      - equal:
          path: spec.selector["app.kubernetes.io/name"]
          value: iap
        documentIndex: 0
      - equal:
          path: spec.selector["app.kubernetes.io/instance"]
          value: RELEASE-NAME
        documentIndex: 0

  - it: should handle different service names
    set:
      replicaCount: 2
      service:
        name: custom-service
        port: 443
      applicationPort: 3443
      useWebSockets: true
    asserts:
      - equal:
          path: metadata.name
          value: custom-service-headless-0
        documentIndex: 0
      - equal:
          path: metadata.name
          value: custom-service-headless-1
        documentIndex: 1

  - it: should handle different port configurations
    set:
      replicaCount: 1
      service:
        name: iap
        port: 9443
      applicationPort: 8080
      useWebSockets: true
    asserts:
      - equal:
          path: spec.ports[0].port
          value: 9443
        documentIndex: 0
      - equal:
          path: spec.ports[0].targetPort
          value: 8080
        documentIndex: 0
      - equal:
          path: spec.ports[0].name
          value: https
        documentIndex: 0

  - it: should not create services when replicaCount is 0
    set:
      replicaCount: 0
      service:
        name: iap
        port: 443
      applicationPort: 3443
      useWebSockets: true
    asserts:
      - hasDocuments:
          count: 0

  ### Additional edge cases

  - it: should handle string replica count
    set:
      replicaCount: "3"
      service:
        name: iap
        port: 443
      applicationPort: 3443
    asserts:
      - hasDocuments:
          count: 3
      - equal:
          path: metadata.name
          value: iap-headless-0
        documentIndex: 0
      - equal:
          path: metadata.name
          value: iap-headless-2
        documentIndex: 2

  - it: should handle large replica count
    set:
      replicaCount: 10
      service:
        name: iap
        port: 443
      applicationPort: 3443
    asserts:
      - hasDocuments:
          count: 10
      - equal:
          path: metadata.name
          value: iap-headless-0
        documentIndex: 0
      - equal:
          path: metadata.name
          value: iap-headless-9
        documentIndex: 9
      - equal:
          path: spec.selector["statefulset.kubernetes.io/pod-name"]
          value: RELEASE-NAME-iap-9
        documentIndex: 9

  - it: should work with complex service names
    set:
      replicaCount: 2
      service:
        name: my-complex-service-name
        port: 443
      applicationPort: 3443
    asserts:
      - equal:
          path: metadata.name
          value: my-complex-service-name-headless-0
        documentIndex: 0
      - equal:
          path: metadata.name
          value: my-complex-service-name-headless-1
        documentIndex: 1

  - it: should handle different port numbers
    set:
      replicaCount: 1
      service:
        name: iap
        port: 1
      applicationPort: 65535
    asserts:
      - equal:
          path: spec.ports[0].port
          value: 1
        documentIndex: 0
      - equal:
          path: spec.ports[0].targetPort
          value: 65535
        documentIndex: 0

  - it: should maintain consistent selector structure
    set:
      replicaCount: 3
      service:
        name: iap
        port: 443
      applicationPort: 3443
    asserts:
      # Verify all services have the same base selector labels
      - equal:
          path: spec.selector["app.kubernetes.io/name"]
          value: iap
        documentIndex: 0
      - equal:
          path: spec.selector["app.kubernetes.io/name"]
          value: iap
        documentIndex: 1
      - equal:
          path: spec.selector["app.kubernetes.io/name"]
          value: iap
        documentIndex: 2

      # Verify each service has unique pod-name selector
      - equal:
          path: spec.selector["statefulset.kubernetes.io/pod-name"]
          value: RELEASE-NAME-iap-0
        documentIndex: 0
      - equal:
          path: spec.selector["statefulset.kubernetes.io/pod-name"]
          value: RELEASE-NAME-iap-1
        documentIndex: 1
      - equal:
          path: spec.selector["statefulset.kubernetes.io/pod-name"]
          value: RELEASE-NAME-iap-2
        documentIndex: 2

  - it: should include all required metadata
    set:
      replicaCount: 1
      service:
        name: iap
        port: 443
      applicationPort: 3443
    asserts:
      - exists:
          path: metadata.name
        documentIndex: 0
      - exists:
          path: metadata.labels
        documentIndex: 0
      - exists:
          path: spec.selector
        documentIndex: 0
      - exists:
          path: spec.ports
        documentIndex: 0
      - isNotEmpty:
          path: spec.ports
        documentIndex: 0

  - it: should work with default values from values.yaml
    # This test will use whatever is in your values.yaml file
    asserts:
      - hasDocuments:
          count: 2  # Adjust based on your default replicaCount
      - isKind:
          of: Service
        documentIndex: 0
      - exists:
          path: metadata.name
        documentIndex: 0
      - exists:
          path: spec.selector
        documentIndex: 0
      - exists:
          path: spec.ports
        documentIndex: 0

  - it: should override default values correctly
    values:
      - ../values.yaml
    set:
      replicaCount: 2  # Override default
      service:
        name: override-test
        port: 8080
      applicationPort: 9000
    asserts:
      - hasDocuments:
          count: 2
      - equal:
          path: metadata.name
          value: override-test-headless-0
        documentIndex: 0
      - equal:
          path: spec.ports[0].port
          value: 8080
        documentIndex: 0
      - equal:
          path: spec.ports[0].targetPort
          value: 9000
        documentIndex: 0

  - it: should handle partial overrides
    values:
      - ../values.yaml
    set:
      replicaCount: 1  # Only override replica count
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Service
        documentIndex: 0
      - exists:
          path: metadata.name
        documentIndex: 0

  - it: should render expected common annotations
    set:
      service:
        name: "release-test-service"
        type: "ClusterIP"
        port: 80
      applicationPort: 8080
    asserts:
      - exists:
          path: metadata.annotations["itential.com/copyright"]
      - exists:
          path: metadata.annotations["itential.com/license"]
      - exists:
          path: metadata.annotations["helm.sh/template-file"]

  - it: should render custom annotations
    set:
      service:
        name: "release-test-service"
        type: "ClusterIP"
        port: 80
        annotations:
          foo: bar
      applicationPort: 8080
    asserts:
      - equal:
          path: metadata.annotations["foo"]
          value: bar

  - it: should include process-metrics port when processExporter is enabled
    set:
      replicaCount: 1
      service:
        name: "process-exporter-service"
        type: "ClusterIP"
        port: 443
      applicationPort: 3443
      useWebSockets: false
      processExporter:
        enabled: true
        port: 9256
    asserts:
      - lengthEqual:
          path: spec.ports
          count: 2
        documentIndex: 0
      - equal:
          path: spec.ports[1].name
          value: "process-metrics"
        documentIndex: 0
      - equal:
          path: spec.ports[1].port
          value: 9256
        documentIndex: 0
      - equal:
          path: spec.ports[1].targetPort
          value: 9256
        documentIndex: 0
      - equal:
          path: spec.ports[1].protocol
          value: "TCP"
        documentIndex: 0

  - it: should not include process-metrics port when processExporter is disabled
    set:
      replicaCount: 1
      service:
        name: "no-process-exporter-service"
        type: "ClusterIP"
        port: 443
      applicationPort: 3443
      useWebSockets: false
      processExporter:
        enabled: false
    asserts:
      - lengthEqual:
          path: spec.ports
          count: 1
        documentIndex: 0
      - equal:
          path: spec.ports[0].name
          value: "https"
        documentIndex: 0

  - it: should include process-metrics port on all replicas when processExporter is enabled
    set:
      replicaCount: 3
      service:
        name: "multi-replica-process-exporter"
        port: 443
      applicationPort: 3443
      processExporter:
        enabled: true
        port: 9256
    asserts:
      - hasDocuments:
          count: 3
      # Check first replica
      - lengthEqual:
          path: spec.ports
          count: 2
        documentIndex: 0
      - equal:
          path: spec.ports[1].name
          value: "process-metrics"
        documentIndex: 0
      - equal:
          path: spec.ports[1].port
          value: 9256
        documentIndex: 0
      # Check last replica
      - lengthEqual:
          path: spec.ports
          count: 2
        documentIndex: 2
      - equal:
          path: spec.ports[1].name
          value: "process-metrics"
        documentIndex: 2
      - equal:
          path: spec.ports[1].port
          value: 9256
        documentIndex: 2

  - it: should maintain correct port order with processExporter enabled
    set:
      replicaCount: 1
      service:
        name: "port-order-test"
        port: 8080
      applicationPort: 9000
      processExporter:
        enabled: true
        port: 9256
    asserts:
      - lengthEqual:
          path: spec.ports
          count: 2
        documentIndex: 0
      # Main service port should be first
      - equal:
          path: spec.ports[0].name
          value: "https"
        documentIndex: 0
      - equal:
          path: spec.ports[0].port
          value: 8080
        documentIndex: 0
      - equal:
          path: spec.ports[0].targetPort
          value: 9000
        documentIndex: 0
      # Process metrics port should be second
      - equal:
          path: spec.ports[1].name
          value: "process-metrics"
        documentIndex: 0
      - equal:
          path: spec.ports[1].port
          value: 9256
        documentIndex: 0
      - equal:
          path: spec.ports[1].targetPort
          value: 9256
        documentIndex: 0
