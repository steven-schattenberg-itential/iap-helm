{{- if .Values.statefulset.enabled -}}
{{- $httpEnabled := "true" -}}
{{- $httpsEnabled := "false" -}}
{{- if .Values.useTLS -}}
  {{- $httpEnabled = "false" -}}
  {{- $httpsEnabled = "true" -}}
{{- end -}}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name:  {{ include "iap.fullname" . }}
  labels:
    {{- include "iap.labels" . | nindent 4 }}
    app.kubernetes.io/component: "statefulset"
  annotations:
    kubernetes.io/description: "Itential Automation Platform StatefulSet executes IAP container."
    {{- include "iap.annotations" . | nindent 4 }}
spec:
  serviceName: "{{ .Values.service.name }}-headless"
  selector:
    matchLabels:
      {{- include "iap.selectorLabels" . | nindent 6 }}
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "iap.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: ""
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
      - name: {{ .Chart.Name }}
        securityContext:
          {{- toYaml .Values.securityContext | nindent 12 }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
          - name: http
            containerPort: {{ .Values.service.port }}
            protocol: TCP
          {{- if .Values.useWebSockets }}
          - name: ws
            containerPort: {{ .Values.websocketPort }}
            protocol: TCP
          {{- end }}
        {{- if .Values.startupProbe.enabled }}
        startupProbe:
          failureThreshold: {{ .Values.startupProbe.failureThreshold }}
          httpGet:
            path: {{ .Values.startupProbe.path }}
            port: {{ .Values.applicationPort }}
            scheme: {{ ternary "HTTPS" "HTTP" .Values.useTLS }}
          initialDelaySeconds: {{ .Values.startupProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.startupProbe.periodSeconds }}
          successThreshold: {{ .Values.startupProbe.successThreshold }}
          timeoutSeconds: {{ .Values.startupProbe.timeoutSeconds }}
        {{- end }}
        {{- if .Values.livenessProbe.enabled }}
        livenessProbe:
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          httpGet:
            path: {{ .Values.livenessProbe.path }}
            port: {{ .Values.applicationPort }}
            scheme: {{ ternary "HTTPS" "HTTP" .Values.useTLS }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
        {{- end }}
        {{- if .Values.readinessProbe.enabled }}
        readinessProbe:
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          httpGet:
            path: {{ .Values.readinessProbe.path }}
            port: {{ .Values.applicationPort }}
            scheme: {{ ternary "HTTPS" "HTTP" .Values.useTLS }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
        {{- end }}
        {{- if .Values.resources }}
        resources:
          {{- toYaml .Values.resources | nindent 12 }}
        {{- end }}
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: ITENTIAL_SERVER_ID
            value: "$(POD_NAME)-{{ .Release.Namespace }}"
          - name: ITENTIAL_VAULT_READ_ONLY
            value: "true"
          - name: ITENTIAL_SERVICE_DIRECTORY
            value: "/opt/itential/platform/services/custom"
          - name: ITENTIAL_WEBSERVER_HTTPS_ENABLED
            value: {{ $httpsEnabled | quote }}
          - name: ITENTIAL_WEBSERVER_HTTP_ENABLED
            value: {{ $httpEnabled | quote }}
          - name: ITENTIAL_WEBSERVER_HTTPS_PORT
            value: {{ .Values.applicationPort | quote }}
          {{- if .Values.useTLS }}
          - name: ITENTIAL_WEBSERVER_HTTPS_CERT
            value: "/etc/ssl/platform/tls.crt"
          - name: ITENTIAL_WEBSERVER_HTTPS_KEY
            value: "/etc/ssl/platform/tls.key"
          {{- end }}
          {{- range $key, $value := .Values.env }}
          - name: {{ $key }}
            value: {{ $value | quote }}
          {{- end }}
        envFrom:
        - secretRef:
            name: itential-platform-secrets
        volumeMounts:
          {{- if .Values.useTLS }}
          - name: platform-cert-volume
            mountPath: /etc/ssl/platform
            readOnly: true
          {{- end }}
          {{- if .Values.mountLogVolume }}
          # Uses a persistent volume claim to mount a directory to write IAP log files to
          - name: "iap-logs-volume"
            mountPath: "/var/log/itential"
          {{- end }}
          {{- if .Values.mountAdapterVolume }}
          # Uses a persistent volume claim to mount a directory that includes adapters and apps
          - name: "iap-assets-volume"
            mountPath: "/opt/itential/platform/services/custom"
          {{- end }}
        {{- with .Values.volumeMounts }}
        {{- toYaml . | nindent 10 }}
        {{- end }}
      {{- if and .Values.processExporter .Values.processExporter.enabled }}
      - name: process-exporter
        args:
          - -config.path=/etc/process-exporter/process-exporter.conf
          - -children=false
          - -recheck-with-time-limit=30s
          - -threads=false
          - -web.config.file=/etc/process-exporter/web-config.yaml
        image: "{{ .Values.processExporter.image.repository }}:{{ .Values.processExporter.image.tag }}"
        imagePullPolicy: Always
        ports:
          - containerPort: {{ .Values.processExporter.port | default 9256 }}
            name: process-metrics
            protocol: TCP
        resources:
          limits:
            memory: 50Mi
          requests:
            cpu: 100m
            memory: 50Mi
        volumeMounts:
          - name: process-exporter
            mountPath: /etc/process-exporter
          - name: platform-cert-volume
            mountPath: /etc/ssl/platform
            readOnly: true
      shareProcessNamespace: true
      {{- end }}
      volumes:
        {{- if .Values.useTLS }}
        - name: platform-cert-volume
          secret:
            secretName: {{ include "iap.fullname" . }}-tls-secret
        {{- end }}
        {{- if and .Values.processExporter .Values.processExporter.enabled }}
        - name: platform-cert-volume
          secret:
            secretName: {{ include "iap.fullname" . }}-tls-secret
        - name: process-exporter
          configMap:
            name: iap-process-exporter
        {{- end }}
      {{- with .Values.volumes }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  {{- if .Values.persistentVolumeClaims.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: "iap-assets-volume"
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: {{ .Values.persistentVolumeClaims.assetClaim.storage }}
        storageClassName: {{ .Values.storageClass.name }}
    - metadata:
        name: "iap-logs-volume"
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: {{ .Values.persistentVolumeClaims.logClaim.storage }}
        storageClassName: {{ .Values.storageClass.name }}
  {{- end }}
{{- end }}